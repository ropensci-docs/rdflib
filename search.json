[{"path":"https://docs.ropensci.org/rdflib/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdflib/articles/data-lake.html","id":"the-tidyverse-approach","dir":"Articles","previous_headings":"Relational data","what":"The tidyverse approach","title":"The Data Lake and Schema On Read","text":"tidyverse operations incredibly effective working relational data. dplyr nyflights13 dataset easy write fast execute: Still, joins often challenge data preparation. Tabular formats can often sloppy key column literal value, also whether column name different tables means thing . things pose challenges later use joining data. RDF representation encourages greater discipline use URIs (though ’ll run bit roughshod caviler use x: .) example uses data already part relational database. Adding additional information database frequently tricky, can result rapidly expanding number tables can become difficult work across.","code":"df <- flights %>%    left_join(airlines) %>%   left_join(planes, by=\"tailnum\") %>%    select(carrier, name, manufacturer, model) %>%    distinct() head(df) ## # A tibble: 6 x 4 ##   carrier name                   manufacturer     model     ##   <chr>   <chr>                  <chr>            <chr>     ## 1 UA      United Air Lines Inc.  BOEING           737-824   ## 2 AA      American Airlines Inc. BOEING           757-223   ## 3 B6      JetBlue Airways        AIRBUS           A320-232  ## 4 DL      Delta Air Lines Inc.   BOEING           757-232   ## 5 UA      United Air Lines Inc.  BOEING           737-924ER ## 6 B6      JetBlue Airways        AIRBUS INDUSTRIE A320-232"},{"path":"https://docs.ropensci.org/rdflib/articles/data-lake.html","id":"rdf-approach","dir":"Articles","previous_headings":"Relational data","what":"RDF approach","title":"The Data Lake and Schema On Read","text":"Okay, now let’s dump nyflights13 data lake. Foreign keys table must represented URIs literal strings: write data.frames nquads. Recall cell data.frame can represented triple, column predicate, primary key (row number) subject, cell value object. turn column names primary keys URIs using prefix based table name. (Note rdflib conversion merely munging cells calling write.table, standard redland library transform). can now read RDF data lake: Note flights natural key (somewhat surprisingly, flight number unique key table, flight number reused route different times.) , treat row unique anonymous key setting key NULL.","code":"uri_flights <- flights %>%    mutate(tailnum = paste0(\"planes:\", tailnum),          carrier = paste0(\"airlines:\", carrier)) system.time({   write_nquads(airlines,  \"airlines.nq\", key = \"carrier\", prefix = \"airlines:\")   write_nquads(planes,  \"planes.nq\", key = \"tailnum\", prefix = \"planes:\")   write_nquads(uri_flights,  \"flights.nq\", prefix = \"flights:\") }) ##    user  system elapsed  ##  16.807   2.561  19.128 system.time({   read_nquads(\"airlines.nq\", rdf = rdf)   read_nquads(\"flights.nq\", rdf = rdf)   read_nquads(\"planes.nq\", rdf = rdf)  }) ##    user  system elapsed  ##  79.267  51.865  70.052"},{"path":"https://docs.ropensci.org/rdflib/articles/data-lake.html","id":"schema-on-read","dir":"Articles","previous_headings":"Relational data","what":"Schema on read","title":"The Data Lake and Schema On Read","text":"simply define columns want immediately get back desired data.frame: Note place joins, give semantically meaningful statements data: e.g. manufacturer property tailnum (corresponding particular physical aircraft), flight number. Departure delay dep_delay property flight, aircraft (tailnum). reminiscent way data organized relational database tables begin : find deb_delay flights table manufacturer planes table. Good relational design encourages , work data user often left required joins, also creates tables semantics less clear.","code":"s <-    'SELECT  ?carrier ?name ?manufacturer ?model ?dep_delay WHERE { ?flight <flights:tailnum>  ?tailnum . ?flight <flights:carrier>  ?carrier . ?flight <flights:dep_delay>  ?dep_delay . ?tailnum <planes:manufacturer> ?manufacturer . ?tailnum <planes:model> ?model . ?carrier <airlines:name> ?name }'  system.time( df <- rdf_query(rdf, s) ) ##    user  system elapsed  ##  16.078   1.164  13.734 head(df) ## # A tibble: 6 x 5 ##   carrier     name                   manufacturer model     dep_delay ##   <chr>       <chr>                  <chr>        <chr>     <chr>     ## 1 airlines:UA United Air Lines Inc.  BOEING       737-824   2         ## 2 airlines:UA United Air Lines Inc.  BOEING       737-824   4         ## 3 airlines:AA American Airlines Inc. BOEING       757-223   2         ## 4 airlines:B6 JetBlue Airways        AIRBUS       A320-232  -1        ## 5 airlines:DL Delta Air Lines Inc.   BOEING       757-232   -6        ## 6 airlines:UA United Air Lines Inc.  BOEING       737-924ER -4"},{"path":[]},{"path":"https://docs.ropensci.org/rdflib/articles/data-lake.html","id":"the-tidyverse-approach-1","dir":"Articles","previous_headings":"Non-tabular data","what":"The tidyverse approach","title":"The Data Lake and Schema On Read","text":"start data Bryan & Wickham, 2017 lesson data rectangling: original lesson illustrates power reasonably concise syntax tidyverse package, purrr, iterate complex structure extract necessary data. approach, nesting data largely nuisance overcome rather asset data analyst:","code":"f <- system.file(\"extdata/gh_repos.json\", package=\"repurrrsive\") gh_data <- jsonlite::read_json(f) ## Error in readBin(structure(4L, class = c(\"file\", \"connection\"), conn_id = <pointer: 0x263>), : can only read from a binary connection gh_flat <- gh_data %>% purrr::flatten()  # abandon nested structure and hope we didn't need it ## Error in eval(lhs, parent, parent): object 'gh_data' not found gh_tibble <- tibble(   name =     gh_flat %>% map_chr(\"name\"),   issues =   gh_flat %>% map_int(\"open_issues_count\"),   wiki =     gh_flat %>% map_lgl(\"has_wiki\"),   homepage = gh_flat %>% map_chr(\"homepage\", .default = \"\"),   owner =    gh_flat %>% map_chr(c(\"owner\", \"login\")) ) ## Error in eval(lhs, parent, parent): object 'gh_flat' not found gh_tibble %>% arrange(name) %>% head() ## Error in eval(lhs, parent, parent): object 'gh_tibble' not found"},{"path":"https://docs.ropensci.org/rdflib/articles/data-lake.html","id":"rdf-on-non-tabular-data","dir":"Articles","previous_headings":"Non-tabular data","what":"RDF on non-tabular data","title":"The Data Lake and Schema On Read","text":"RDF approach merely treats JSON JSON-LD within given vocabulary. context, nesting implicitly provides important semantic information relationships data, captured RDF triples. , import JSON data RDF (add existing triplestore just fun) can query back lake just selecting columns interest.","code":"gh_rdf <- as_rdf(gh_data, rdf = rdf, prefix = \"gh:\") ## Error in as_rdf(gh_data, rdf = rdf, prefix = \"gh:\"): object 'gh_data' not found s <-    'SELECT ?name ?issues ?wiki ?homepage ?owner WHERE { ?repo <gh:homepage>  ?homepage . ?repo <gh:has_wiki> ?wiki . ?repo <gh:open_issues_count> ?issues . ?repo <gh:name> ?name . ?repo <gh:owner> ?owner_id . ?owner_id <gh:login>  ?owner  }'  system.time( rdf_tibble <- rdf_query(rdf, s) ) ##    user  system elapsed  ##   7.992   0.287   8.279 head(rdf_tibble) ## # A tibble: 0 x 5 ## # … with 5 variables: name <chr>, issues <chr>, wiki <chr>, homepage <chr>, owner <chr>"},{"path":"https://docs.ropensci.org/rdflib/articles/data-lake.html","id":"going-further-a-dplyr-style-syntax-for-sparql","dir":"Articles","previous_headings":"Non-tabular data","what":"Going further: A dplyr-style syntax for SPARQL?","title":"The Data Lake and Schema On Read","text":"dplyr provides reasonably intuitive, powerful, concise interface many common SQL commands. Indeed, dplyr function calls literally serialized corresponding SQL query working relational database back-end (via dbplyr). Can similar API developed SPARQL queries? SPARQL syntax obviously inspired SQL syntax, includes many operations found SQL dplyr (e.g. SELECT, , FILTER, DISTINCT) well RDF specific queries. willing make assumptions common queries, can start make simplifying functions. instance, patterns, variables returned always objects triples, columns named using corresponding predicate. Assuming additional convention define prefixes indicate graph traversal (.e. nested values), constructed query call: Though generalize arbitrary labels predicates might need support something like:","code":"tidy_schema(name, open_issues_count, has_wiki, homepage owner.login) tidy_schema(list = list(name = \"gh:name\",                          issues = \"gh:open_issues_count\",                          wiki = \"gh:has_wiki\",                          homepage = \"gh:homepage\",                         owner = list(\"gh:owner\", login = \"gh:login\")))"},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"its-all-about-the-triples","dir":"Articles","previous_headings":"","what":"It’s all about the triples","title":"A tidyverse lover's intro to RDF","text":"Looking table closely, see row reduced elementary statement can make data. row longer tells measurements (observations) attributes (variables) given species (key), instead, get just one fact per row, Mazda RX4 gets mpg measurement 21.0. RDF-world, think three-part statements something special, call triples. RDF triples. first column came row names case, Model car. acts serves key index data.frame, .e. subject described. next column variable (also called attribute property) measured, (, column names, key column(s), tidy data), called property predicate RDF-speak (slash grammar-school jargon). third column actual value measured, object predicate. Call key-property-value subject-predicate-object, triples. can represent just data fully elementary manner. Table 1: many names triples. Table 1 summarizes many different names associated triples. first naming convention terminology typically associated RDF. second set terms typically associated JSON data, remaining examples tabular relational data structures.","code":""},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"subject-uris","dir":"Articles","previous_headings":"","what":"Subject URIs","title":"A tidyverse lover's intro to RDF","text":"Using row names subject intuitive actually bit sloppy. tidyverse lovers know tidyverse doesn’t like rownames, aren’t tidy way causing trouble. course, made rownames proper column use gather, taken one step . true tidyverse fashion, rownames-column really just one variable can observe, one attribute thing describing: say, thing (Car ) car_model_name Mazda RX4 thing also mpg 21. can accomplish greater level abstraction keeping Model just another variable row ids key (.e. subject) triple: identical gather columns, just made original row ids explicit column reference (diligent reader recognize need information reverse operation spread data back ’s wide form; without , transformation lossy irreversible). subject column now consists simple numeric id’s, gained additional triple every row original data states Model id number (e.g. 1 Model Mazda RX4). Okay, now ’re probably thinking: “wait minute, 1 unique specific key, surely cause trouble,” ’d right. instance, performed transformation iris data, get triples exact format, ready bind_rows: iris data, 1 corresponds first individual Iris flower measurement data, Mazda RX4. don’t want get confused, ’re going need make sure identifiers unique: just kind unique, unique World wide. else unique world-wide? Yup, guessed , going use URLs subject identifiers, just like world wide web. Think clever -sourcing whole internet domain registry service. , ’ll imagine registering example datasets separate base URL, instead vague 1 identify first observation iris example data, ’ll use URL http://example.com/iris#1, can now distinguish http://example.com/mtcars#1 (’re way ahead , yes, ’ll say URI vs URL use blank nodes just minute). example:","code":"car_triples <-  mtcars %>%    rownames_to_column(\"Model\") %>%    rowid_to_column(\"subject\") %>%    gather(predicate, object, -subject) iris_triples <- iris %>%   rowid_to_column(\"subject\") %>%   gather(key = predicate, value = object, -subject) ## Warning: attributes are not identical across measure variables; they ## will be dropped iris_triples <- iris %>%   rowid_to_column(\"subject\") %>%   mutate(subject = paste0(\"http://example.com/\", \"iris#\", subject)) %>%   gather(key = predicate, value = object, -subject) ## Warning: attributes are not identical across measure variables; they ## will be dropped"},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"predicate-uris","dir":"Articles","previous_headings":"","what":"Predicate URIs","title":"A tidyverse lover's intro to RDF","text":"slightly subtle version problem can arise predicates. Different tables may use attribute (.e. originally, column name variable) different things – attribute labeled cyl means “number cylinders” mtcars data.frame, mean something different different data. Luckily ’ve already seen make names unique RDF turn URLs. point motivation name “Linked Data” probably becoming painfully obvious.","code":"iris_triples <- iris %>%   rowid_to_column(\"subject\") %>%   mutate(subject = paste0(\"http://example.com/\", \"iris#\", subject)) %>%   gather(key = predicate, value = object, -subject) %>%   mutate(predicate = paste0(\"http://example.com/\", \"iris#\", predicate)) ## Warning: attributes are not identical across measure variables; they ## will be dropped"},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"datatype-uris","dir":"Articles","previous_headings":"","what":"Datatype URIs","title":"A tidyverse lover's intro to RDF","text":"One column go! wait minute, object column different, isn’t ? measurements don’t suffer ambiguity – , confusion car 4 cylinders iris 4 mm long sepals. However, new issue arisen data type (e.g. string, boolean, double, integer, dateTime, etc). close look reveals object column encoded character numeric – ’d happen? tidyr::gather coerced whole column character strings values, , Species names iris Model names mtcars, text strings (couldn’t exactly coerce integers). Perhaps isn’t big deal – can often guess type object just looks (-called Duck typing, quacks like duck…). Still, explicit data types Good Thing, fortunately ’s explicit way address … oh … … yes … URLs! Luckily don’t make example.com URLs time ’s already well-established list data types widely used across internet originally developed use XML (warned ) Schemas, listed see W3C RDF DataTypes. standard shows, familiar types string, double, boolean, integer, etc made explicit using XML Schema URL: http://www.w3.org/2001/XMLSchema#, followed type; integer `http://www.w3.org/2001/XMLSchema#integer, character string http://www.w3.org/2001/XMLSchema#string etc. case little different, URL attached directly object value, set quotes, using symbol ^^ (dunno, think two duck feet), 5.1 becomes \"5.1\"^^http://www.w3.org/2001/XMLSchema#double. Wow2. time won’t worry type, , quacks…","code":""},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"triples-in-rdflib","dir":"Articles","previous_headings":"","what":"Triples in rdflib","title":"A tidyverse lover's intro to RDF","text":"far, explored concept triples using familiar data.frame structures, haven’t yet introduced rdflib functions. Though ’ve thinking RDF data explicitly tabular three-column structure, really just one potentially convenient representation. Just tabular data can represented data.frame, written disk .csv file, stored database (like MySQL PostgreSQL), RDF even greater degree. separate abstractions information compared represented. take advantage abstraction, rdflib introduces rdf class object. Depending initialized, utilize storage memory (default), disk, potentially array different databases, (including relational databases like PostgreSQL rdf-specific ones like Virtuoso, depending underlying redland library compiled – topic beyond scope ). , simply initialize rdf object using default -memory storage: add triples rdf object (often called RDF Model RDF Graph), use function rdf_add, takes subject, predicate, object arguments, just discussed. datatype URI can inferred R type used object (e.g. numeric, integer, logical, character, etc.) result displayed triple discussed . technically example nquad notation see later. Note inferred datatype URI.","code":"rdf <- rdf() base <- paste0(\"http://example.com/\", \"iris#\")  rdf %>%    rdf_add(subject = paste0(base, \"obs1\"),            predicate = paste0(base, \"Sepal.Length\"),            object = 5.1)  rdf ## Total of 1 triples, stored in hashes ## ------------------------------- ## <http://example.com/iris#obs1> <http://example.com/iris#Sepal.Length> \"5.1\"^^<http://www.w3.org/2001/XMLSchema#decimal> ."},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"dialing-back-the-ugly","dir":"Articles","previous_headings":"Triples in rdflib","what":"Dialing back the ugly","title":"A tidyverse lover's intro to RDF","text":"gather thing started well, now data looking pretty ugly, mention cumbersome. idea RDF hasn’t taken data science storm, haven’t even looked ugly gets write RDF/XML serialization yet! upside, ’ve introduced essential concepts let us start work data triples. proceed , ’ll take quick look options expressing triples different ways, also introduce different serializations (ways representing text) frequently used express triples.","code":""},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"prefixes-for-uris","dir":"Articles","previous_headings":"Triples in rdflib > Dialing back the ugly","what":"Prefixes for URIs","title":"A tidyverse lover's intro to RDF","text":"Long URL strings one obvious ways started looking like concise, minimal statement got ugly cumbersome. Borrowing notion Namespaces XML, RDF tools permit custom prefixes declared swapped longer URLs. prefix typically short string3 followed : used place shared root URL. instance, might use prefix iris:Sepal.Length iris:Sepal.Width iris: defined mean http://example.com/iris# example .","code":""},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"uri-vs-url","dir":"Articles","previous_headings":"Triples in rdflib > Dialing back the ugly","what":"URI vs URL","title":"A tidyverse lover's intro to RDF","text":"’ve referred things URLs, (uniform resource locator, aka web address) technically can broader class things known URIs (uniform resource identifier). addition including anything URL, URIs include things URLs, like urn:isbn:0-486-27557-4 urn:uuid:aac06f69-7ec8-403d-ad84-baa549133dce, URNs: unique resource numbers numbering scheme (e.g. book ISBN numbers, UUIDs), neither URLs nonetheless enjoy globally unique property.","code":""},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"blank-nodes","dir":"Articles","previous_headings":"Triples in rdflib > Dialing back the ugly","what":"Blank nodes","title":"A tidyverse lover's intro to RDF","text":"Sometimes need globally unique identifier, just want way refer node (e.g. subject, sometimes object) uniquely document. role blank node (follow link better overview). frequently denoted prefix _:, e.g. replaced sample IDs _:1, _:2 instead URLs http://example.com/iris#1 etc. Note RDF operations need preserve actual string pattern blank ID name, means exact thing replace _:1s _:b1 _:2 _:b2, etc. librdf can get blank node passing empty string character string URI subject. also use URI isn’t URL predicate: Note get blank node, _: randomly generated string.","code":"rdf <- rdf() rdf %>% rdf_add(\"\",                    \"iris:Sepal.Length\",                  object = 5.1) rdf ## Total of 1 triples, stored in hashes ## ------------------------------- ## _:r1709096060r1854r1 <iris:Sepal.Length> \"5.1\"^^<http://www.w3.org/2001/XMLSchema#decimal> ."},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"triple-notation-nquads-rdfxml-turtle-and-nquads","dir":"Articles","previous_headings":"Triples in rdflib","what":"Triple notation: nquads rdfxml, turtle, and nquads","title":"A tidyverse lover's intro to RDF","text":"far relied primarily three-column tabular format represent triples. also seen default print format used rdf method, known N-Quads , displays bare, space-separated triple, possibly datatype URI attached object. line ends dot, indicates part local triplestore (aka RDF graph RDF Model). Technically another URI indicating unique global address triplestore question. can serialize rdf object file format rdf_serialize() function, e.g. Just formats can serialized rdf_serialize(), can read rdflib using function rdf_parse(): N-Quads convenient triple displayed unique line, format supports blank node Datatype URIs manner just discussed. formats concise. Rather print file, can simply change default print format used rdflib explore textual layout serializations. one common classical serializations, RDF/XML expresses triples XML-based schema: Just looking probably enough explain many alternative serializations created. Another popular format, turtle, looks like nquads: , blank nodes denoted []. turtle uses indentation indicate three predicates (creator, description, title) properties subject.","code":"rdf_serialize(rdf, \"rdf.nq\", format = \"nquads\") doc <- system.file(\"extdata/example.rdf\", package=\"redland\") rdf <- rdf_parse(doc, format = \"rdfxml\")  rdf ## Total of 3 triples, stored in hashes ## ------------------------------- ## <http://www.johnsmith.com/> <http://purl.org/dc/elements/1.1/description> \"The generic home page of John Smith\" . ## <http://www.johnsmith.com/> <http://purl.org/dc/elements/1.1/creator> \"John Smith\" . ## <http://www.johnsmith.com/> <http://purl.org/dc/elements/1.1/title> \"John Smith's Home Page\" . options(rdf_print_format = \"rdfxml\") rdf ## Total of 3 triples, stored in hashes ## ------------------------------- ## <?xml version=\"1.0\" encoding=\"utf-8\"?> ## <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xml:base=\"localhost://\"> ##   <rdf:Description rdf:about=\"http://www.johnsmith.com/\"> ##     <ns0:description xmlns:ns0=\"http://purl.org/dc/elements/1.1/\">The generic home page of John Smith<\/ns0:description> ##   <\/rdf:Description> ##   <rdf:Description rdf:about=\"http://www.johnsmith.com/\"> ##     <ns0:creator xmlns:ns0=\"http://purl.org/dc/elements/1.1/\">John Smith<\/ns0:creator> ##   <\/rdf:Description> ##   <rdf:Description rdf:about=\"http://www.johnsmith.com/\"> ##     <ns0:title xmlns:ns0=\"http://purl.org/dc/elements/1.1/\">John Smith's Home Page<\/ns0:title> options(rdf_print_format = \"turtle\") rdf ## Total of 3 triples, stored in hashes ## ------------------------------- ## @base <localhost://> . ## @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . ##  ## <http://www.johnsmith.com/> ##     <http://purl.org/dc/elements/1.1/creator> \"John Smith\" ; ##     <http://purl.org/dc/elements/1.1/description> \"The generic home page of John Smith\" ; ##     <http://purl.org/dc/elements/1.1/title> \"John Smith's Home Page\" ."},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"json-ld","dir":"Articles","previous_headings":"Triples in rdflib > Triple notation: nquads rdfxml, turtle, and nquads","what":"JSON-LD","title":"A tidyverse lover's intro to RDF","text":"formats nquads turtle provide much cleaner syntax RDF/XML, also introduce custom format rather building familiar standard (like XML) users already well-developed set tools intuition. decade challenges (RDF specification started 1997, including HTML-embedded serialization RDFa 2004), user friendly specification emerged form JSON-LD (1.0 W3C specification released 2014, 1.1 specification released February 2018). JSON-LD uses familiar object notation JSON, (rapidly replacing XML ubiquitous data exchange format, familiar many readers specialized RDF formats even XML. rdf data JSON-LD serialization: serialization, subject corresponds “thing curly braces,” (.e. JSON “object”) identified special @id property (omitting @id corresponds blank node). predicate-object pairs triple just JSON key-value pairs within curly braces given object. can make format look even natural stripping URLs. possible use prefixes place URLs, natural pull entirely, e.g. declaring default vocabulary JSON-LD “Context”, like : context JSON-LD file can also define datatypes, use multiple namespaces, permit different names JSON keys found URLs. complete introduction JSON-LD beyond scope, representation essentially provides way map intuitive JSON structures precise RDF triples.","code":"options(rdf_print_format = \"jsonld\") rdf ## Total of 3 triples, stored in hashes ## ------------------------------- ## { ##   \"@id\": \"http://www.johnsmith.com/\", ##   \"http://purl.org/dc/elements/1.1/creator\": \"John Smith\", ##   \"http://purl.org/dc/elements/1.1/description\": \"The generic home page of John Smith\", ##   \"http://purl.org/dc/elements/1.1/title\": \"John Smith's Home Page\" ## } rdf_serialize(rdf, \"example.json\", \"jsonld\") %>%    jsonld_compact(context = '{\"@vocab\": \"http://purl.org/dc/elements/1.1/\"}') ## { ##   \"@context\": { ##     \"@vocab\": \"http://purl.org/dc/elements/1.1/\" ##   }, ##   \"@id\": \"http://www.johnsmith.com/\", ##   \"creator\": \"John Smith\", ##   \"description\": \"The generic home page of John Smith\", ##   \"title\": \"John Smith's Home Page\" ## }"},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"from-tables-to-graphs","dir":"Articles","previous_headings":"Triples in rdflib","what":"From tables to Graphs","title":"A tidyverse lover's intro to RDF","text":"far considered examples data represented tabular form. frequently encounter data easily represented format. instance, consider JSON data example: JSON object Person another JSON object nested inside (PostalAddress). Yet look data nquads, see familiar flat triple structure: happened? Note address given blank node URI _:b0, serves object address line Person subject properties belonging PostalAddress. JSON-LD, structure referred ‘flattened’: Note JSON-LD structure now starts object called @graph. Unlike opening examples, data tabular nature, rather, formatted nested graph. nesting natural JSON, objects can arranged tree-like structure single outer-set {} indicating root object. graph just generic form tree structure, agnostic root. (fact use @reverse property address create root PostalAddress contains Person). way, notion data graph offers powerful generalization notion tabular data. @graph consists two separate objects: PostalAddress (id _:b0) Person (ORCID id). layout acts much like foreign key relational database, list-column tidyverse (e.g. see tidyr::nest()). rdflib uses flattened representation serializing JSON-LD objects. Note JSON-LD provides rich set utilities go back forth flattened nested layouts using jsonld_frame. instance, can recover original structure just specifying frame indicates type want root: (Recall compacting just replaces URIs type declarations short names given context). somewhat analogous join operations relational data, nesting un-nesting functions tidyr. However, working RDF, beautiful thing differences two representations (nested flattened) purely aesthetic. representations precisely semantic meaning, thus precisely thing RDF world. never orchestrate join foreign key can perform desired operations like select filter data. don’t think data organized, always molten triple format, whatever , however nested might . Just saw gather provide relatively generic way transforming data.frame RDF triples, JSON-LD defines relatively simple convention getting nested data (e.g. lists) RDF triples. convention simply treats JSON {} objects subjects (often assigning blank node ids, saw row ids), key-value pairs (R-speak, list names values) predicates objects, respectively. raw JSON file can treated JSON-LD, ideally specifying appropriate context, serves map terms URIs saw data.frames. JSON-LD already valid RDF format can parse rdflib. instance, simple function coercing list objects RDF specified context: set default context (https://schema.org/), map R terms corresponding schema terms can now apply function arbitrary R list objects, bibentry class object returned citation() function:","code":"ex <- system.file(\"extdata/person.json\", package=\"rdflib\") cat(readLines(ex), sep = \"\\n\") ## { ##   \"@context\": \"http://schema.org\", ##   \"@type\": \"Person\", ##   \"@id\": \"https://orcid.org/0000-0002-1642-628X\", ##   \"givenName\": \"Carl\", ##   \"familyName\": \"Boettiger\", ##   \"address\": { ##     \"@type\": \"PostalAddress\", ##     \"streetAddress\": \"130 Mulford Hall #3114\", ##     \"addressLocality\": \"Berkeley\", ##     \"addressRegion\": \"CA\", ##     \"postalCode\": \"94720-3114\" ##   } ## } #jsonld_compact(ex, \"{}\") options(rdf_print_format = \"nquads\") rdf <- rdf_parse(ex, \"jsonld\") rdf ## Total of 9 triples, stored in hashes ## ------------------------------- ## _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/PostalAddress> . ## <https://orcid.org/0000-0002-1642-628X> <http://schema.org/givenName> \"Carl\" . ## _:b0 <http://schema.org/addressLocality> \"Berkeley\" . ## <https://orcid.org/0000-0002-1642-628X> <http://schema.org/address> _:b0 . ## _:b0 <http://schema.org/streetAddress> \"130 Mulford Hall #3114\" . ## <https://orcid.org/0000-0002-1642-628X> <http://schema.org/familyName> \"Boettiger\" . ## _:b0 <http://schema.org/postalCode> \"94720-3114\" . ## _:b0 <http://schema.org/addressRegion> \"CA\" . ## <https://orcid.org/0000-0002-1642-628X> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person> . jsonld_flatten(ex, context = \"https://schema.org/\") ## { ##   \"@context\": \"https://schema.org/\", ##   \"@graph\": [ ##     { ##       \"id\": \"_:b0\", ##       \"type\": \"PostalAddress\", ##       \"addressLocality\": \"Berkeley\", ##       \"addressRegion\": \"CA\", ##       \"postalCode\": \"94720-3114\", ##       \"streetAddress\": \"130 Mulford Hall #3114\" ##     }, ##     { ##       \"id\": \"https://orcid.org/0000-0002-1642-628X\", ##       \"type\": \"Person\", ##       \"address\": { ##         \"id\": \"_:b0\" ##       }, ##       \"familyName\": \"Boettiger\", ##       \"givenName\": \"Carl\" ##     } ##   ] ## } jsonld_flatten(ex) %>%   jsonld_frame('{\"@type\": \"https://schema.org//Person\"}') %>%   jsonld_compact(context = \"https://schema.org/\") ## { ##   \"@context\": \"https://schema.org/\" ## } as_rdf.list <- function(x, context = \"https://schema.org/\"){   if(length(x) == 1) x <- x[[1]]   x[[\"@context\"]] <- context   json <- jsonlite::toJSON(x, pretty = TRUE, auto_unbox = TRUE, force = TRUE)   rdflib::rdf_parse(json, \"jsonld\") } context <- list(\"https://schema.org/\",                  list(schema = \"https://schema.org//\",                      given = \"givenName\",                      family = \"familyName\",                      title = \"name\",                      year = \"datePublished\",                      note = \"softwareVersion\",                      comment = \"identifier\",                      role = \"https://www.loc.gov/marc/relators/relaterm.html\")) options(rdf_print_format = \"nquads\") # go back to the default   R <- citation(\"rdflib\") rdf <- as_rdf.list(R, context) rdf ## Total of 16 triples, stored in hashes ## ------------------------------- ## _:b2 <http://schema.org/email> \"cboettig@gmail.com\" . ## _:b2 <https://www.loc.gov/marc/relators/relaterm.html> _:b4 . ## _:b1 <http://schema.org/author> _:b2 . ## _:b2 <http://schema.org/identifier> _:b3 . ## _:b2 <http://schema.org/givenName> \"Carl\" . ## _:b1 <http://schema.org/url> <https://doi.org/10.5281/zenodo.1098478> . ## _:b1 <https://www.loc.gov/marc/relators/relaterm.html> \"cre\" . ## _:b1 <https://www.loc.gov/marc/relators/relaterm.html> \"cph\" . ## _:b1 <https://www.loc.gov/marc/relators/relaterm.html> \"aut\" . ## _:b1 <http://schema.org/identifier> \"0000-0002-1642-628X\" . ##  ## ... with 6 more triples"},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"sparql-a-graph-query-language","dir":"Articles","previous_headings":"Triples in rdflib","what":"SPARQL: A Graph Query Language","title":"A tidyverse lover's intro to RDF","text":"far, spent lot words describing transform data RDF, much actually anything cool said data. Still working writing section","code":"#source(system.file(\"examples/as_rdf.R\", package=\"rdflib\")) source(system.file(\"examples/tidy_schema.R\", package=\"rdflib\"))  ## Testing: Digest some data.frames into RDF and extract back  cars <- mtcars %>% rownames_to_column(\"Model\")  x1 <- as_rdf(iris, NULL, \"iris:\")  x2 <- as_rdf(cars, NULL, \"mtcars:\")  rdf <- c(x1,x2)"},{"path":"https://docs.ropensci.org/rdflib/articles/rdf_intro.html","id":"sparql-getting-back-to-tidy-tables","dir":"Articles","previous_headings":"Triples in rdflib","what":"SPARQL: Getting back to Tidy Tables!","title":"A tidyverse lover's intro to RDF","text":"can automatically create SPARQL query returns “tidy data”. Tidy data predicates columns, objects values, subjects rows.","code":"sparql <-   'SELECT  ?Species ?Sepal_Length ?Sepal_Width ?Petal_Length  ?Petal_Width WHERE {  ?s <iris:Species>  ?Species .  ?s <iris:Sepal.Width>  ?Sepal_Width .  ?s <iris:Sepal.Length>  ?Sepal_Length .   ?s <iris:Petal.Length>  ?Petal_Length .  ?s <iris:Petal.Width>  ?Petal_Width  }'  iris2 <- rdf_query(rdf, sparql) sparql <- tidy_schema(\"Species\",  \"Sepal.Length\", \"Sepal.Width\", prefix = \"iris\")  rdf_query(rdf, sparql) ## # A tibble: 198 × 3 ##    Species    Sepal_Length Sepal_Width ##    <chr>             <dbl>       <dbl> ##  1 versicolor          6.5         2.8 ##  2 versicolor          6           2.7 ##  3 versicolor          6           2.7 ##  4 virginica           7.2         3   ##  5 virginica           7.2         3   ##  6 versicolor          5.6         2.9 ##  7 setosa              4.4         2.9 ##  8 versicolor          6.3         2.3 ##  9 versicolor          5.6         3   ## 10 versicolor          5.6         3   ## # ℹ 188 more rows"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Working with Database Storage Backends in `rdflib`","text":"Unfortunately, time, support storage devices included prebuild Mac Windows binaries redland R package. Users wanting take advantage disk-based storage must instead build install redland R package source; cases, also build redland C libraries source. package provides Dockerfile containing portable recipe building library support 5 main backend storage devices: SQLite, MySQL, PostgreSQL, Virtuoso, Berkeley DB. vignette documents installation use devices. Also see official documentation redland C library discussing supported storage devices.","code":""},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"benchmarks","dir":"Articles","previous_headings":"","what":"Benchmarks","title":"Working with Database Storage Backends in `rdflib`","text":"show examples reading modest set 190,000 triples nquads file executing simple SPARQL query using five backends supported rdflib. First load libraries prepare example file triple-ifying 10,000 rows flights data.frame:","code":"library(rdflib) library(nycflights13) example <- flights[1e4,]  system.time( write_nquads(example, \"example.nq\", prefix = \"flights\") ) #>    user  system elapsed  #>   0.009   0.001   0.008  system.time( write_nquads(flights, \"flights.nq\", prefix = \"flights\") ) #>    user  system elapsed  #>  15.107   0.474  15.632"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"in-memory","dir":"Articles","previous_headings":"Benchmarks","what":"In Memory","title":"Working with Database Storage Backends in `rdflib`","text":"dataset small enough easily fit memory, default -memory option obvious choice excellent performance. Note option possible larger triplestores (e.g. millions triples). testing found even machines 100GB+ RAM, redland -memory backend able take advantage additional memory disk-based backends required.","code":"triplestore <- rdf() system.time(   read_nquads(\"example.nq\", rdf = triplestore) # smaller set ) #>    user  system elapsed  #>   0.002   0.000   0.002 query <-    'SELECT  ?carrier ?flight ?origin ?dep_delay WHERE { ?flight <flights:carrier>  ?carrier . ?flight <flights:dep_delay>  ?dep_delay . ?flight <flights:origin> ?origin }' system.time( df <- rdf_query(triplestore, query) ) #>    user  system elapsed  #>   0.011   0.008   0.019 rdf_free(triplestore)"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"bdb","dir":"Articles","previous_headings":"Benchmarks","what":"BDB","title":"Working with Database Storage Backends in `rdflib`","text":"Berkeley DB simple key-value store mature primary persistent store suitable large models, tested 2-3 million range. Berkeley DB simple disk-based storage option. Install redland libraries berkeley-db (e.g. bd-dev Debian/Ubuntu) libraries, install redland source. BDB relatively fast data large memory.","code":"triplestore <- rdf(storage=\"BDB\", new_db = TRUE) system.time(   read_nquads(\"flights.nq\", rdf = triplestore) ) #>    user  system elapsed  #>  55.985  15.686  71.787 system.time( df <- rdf_query(triplestore, query) ) #>    user  system elapsed  #>  15.001   0.216  15.222 rdf_free(triplestore) ## Becuase BDB is just a hash table, redland needs three separate files: unlink(\"rdflib-po2s.db\") unlink(\"rdflib-so2p.db\") unlink(\"rdflib-sp2o.db\")"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"virtuoso","dir":"Articles","previous_headings":"Benchmarks","what":"Virtuoso","title":"Working with Database Storage Backends in `rdflib`","text":"Unlike backends use general purpose relational databases key-value stores, Virtuoso dedicated RDF-based data. Virtuoso popular open source database RDF rich set built-interfaces features, can also interact directly redland bindings just like backend rdflib. Virtuoso setup may slightly involved individuals unfamiliar , probably provide best performance case large triplestores. example shows new database setup, rdflib can also connect existing Virtuoso database. remote virtuoso:","code":"triplestore <- rdf(storage = \"virtuoso\",                     user = \"dba\",                     password = \"dba\",                     dsn = \"Local Virtuoso\"                    )  system.time(   read_nquads(\"flights.nq\", rdf = triplestore) ) #>     user   system  elapsed  #>  111.500   84.856 3336.717 system.time( df <- rdf_query(triplestore, query) ) #>    user  system elapsed  #>  17.899   9.056 133.143 df <- rdf_query(triplestore, \"SELECT ?s ?p ?o WHERE{ ?s ?p ?o }\") #> Warning: 1391187 parsing failures. #>     row col expected     actual         file #> 1338850   o a double _:r1011167 literal data #> 1338851   o a double _:r1011168 literal data #> 1338852   o a double _:r1011169 literal data #> 1338853   o a double _:r1011170 literal data #> 1338854   o a double _:r1012106 literal data #> ....... ... ........ .......... ............ #> See problems(...) for more details. df #> # A tibble: 6,398,744 x 3 #>    s          p                o #>    <chr>      <chr>        <dbl> #>  1 flights:1  flights:year  2013 #>  2 flights:2  flights:year  2013 #>  3 flights:3  flights:year  2013 #>  4 flights:4  flights:year  2013 #>  5 flights:5  flights:year  2013 #>  6 flights:6  flights:year  2013 #>  7 flights:7  flights:year  2013 #>  8 flights:8  flights:year  2013 #>  9 flights:9  flights:year  2013 #> 10 flights:10 flights:year  2013 #> # … with 6,398,734 more rows rdf_free(triplestore) triplestore <- rdf(storage = \"virtuoso\",                     user = \"dba\",                     password = \"dba\",                     host = \"virtuoso:1111\"                    )  system.time(   read_nquads(\"flights.nq\", rdf = triplestore) ) #>       user     system    elapsed  #> 129710.695   2036.842 149941.651"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"postgres","dir":"Articles","previous_headings":"Benchmarks","what":"POSTGRES","title":"Working with Database Storage Backends in `rdflib`","text":"Postgres MySQL ubiquitious relational databases. backend requires redland binaries built source support enabled, case pre-built Mac Linux binaries.","code":"triplestore <- rdf(storage = \"postgres\",                     host = \"postgres\",                     user = \"postgres\",                     password = \"rdflib\",                     new_db = TRUE) #> Warning in rdf_storage(storage, world, host, port, user, password, #> database, : postgres driver not found. Falling back on in-memory storage system.time(   read_nquads(\"flights.nq\", rdf = triplestore) ) #>    user  system elapsed  #>  31.803  20.715  52.586 system.time( df <- rdf_query(triplestore, query) ) #>    user  system elapsed  #>   5.449   0.032   5.483 rdf_free(triplestore)"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"mysql","dir":"Articles","previous_headings":"Benchmarks","what":"MySQL","title":"Working with Database Storage Backends in `rdflib`","text":"","code":"triplestore <- rdf(storage = \"mysql\",                     host = \"mariadb\",                     user = \"root\",                     password = \"rdflib\",                     database = \"mysql\",                    new_db = TRUE                   ) #> Warning in rdf_storage(storage, world, host, port, user, password, #> database, : mysql driver not found. Falling back on in-memory storage   read_nquads(\"flights.nq\", rdf = triplestore) #> Total of 1996496 triples, stored in hashes #> ------------------------------- #>   #>  (preview supressed for performance) system.time(df <- rdf_query(triplestore, query)) #>    user  system elapsed  #>   5.510   0.004   5.515 rdf_free(triplestore)"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"sqlite","dir":"Articles","previous_headings":"Benchmarks","what":"SQLite","title":"Working with Database Storage Backends in `rdflib`","text":"SQLite relatively easy set , appears rather poor overall performance. Requires SQLite development libraries installed (work ‘---box’ Mac binaries redland package).","code":"triplestore <- rdf(storage=\"sqlite\", new_db = TRUE, name=\"rdflib.sqlite\") #> Warning in rdf_storage(storage, world, host, port, user, password, #> database, : sqlite driver not found. Falling back on in-memory storage  system.time(   read_nquads(\"flights.nq\", rdf = triplestore) ) #>    user  system elapsed  #>  31.607  20.219  51.857 system.time( df <- rdf_query(triplestore, query) ) #>    user  system elapsed  #>   5.559   0.028   5.588 rdf_free(triplestore)"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"building-redland-with-full-backend-support","dir":"Articles","previous_headings":"","what":"Building redland with full backend support","title":"Working with Database Storage Backends in `rdflib`","text":"Getting full support backend databases redland R package trivial. redland R package provides bindings redland libraries. Unfortunately, commonly available binary versions libraries, librdf0-dev Debian, redland Mac OSX brew, statically linked versions Mac Windows shipping R package, build libraries optional support backends. (NOTE: C library must built source options, just R package source). Consequently, users must build librdf original sources, https://github.com/dajobe/librdf backend linking libraries available, also build redland R package source, able access backends. Debian Ubuntu system looks like following: Now can build raptor (parsers), rasqal (sparql queries) rdflib source: See Dockerfile inst/docker example , simply use Rocker-based image ropensci/rdflib.","code":"apt-get update && apt-get -yq install \\ libxml2-dev \\ libcurl4-openssl-dev \\ libssl-dev \\ git \\ automake \\ libtool \\ gtk-doc-tools \\ bison \\ flex \\ libgmp-dev  \\ libmhash-dev \\ libgcrypt20-dev \\ libpcre3-dev \\ libv8-dev \\ libjq-dev \\ libpq-dev \\ libdb-dev \\ libsqlite3-dev \\ libmariadbclient-dev \\ librdf-storage-virtuoso \\ virtuoso-server \\ unixodbc-dev git clone git://github.com/dajobe/raptor.git && \\ cd raptor && \\ ./autogen.sh && \\ make && \\ make install && \\ cd .. && \\ git clone git://github.com/dajobe/rasqal.git && \\ cd rasqal && \\ ./autogen.sh && \\ make && \\ make install && \\ cd .. && \\ git clone git://github.com/dajobe/librdf.git && \\ cd librdf && \\ ./autogen.sh && \\ make && \\ make install"},{"path":"https://docs.ropensci.org/rdflib/articles/storage.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"Working with Database Storage Backends in `rdflib`","text":"rdflib uses Circle-CI test database backends using docker-compose. docker-compose pulls dedicated docker containers postgres mariadb, along ropensci/rdflib container, includes version redland compiled support five major backend storage systems. See Dockerfile inst/docker associated [docker-compose.yml]((https://github.com/ropensci/rdflib/tree/master/docker-compose.yml) used testing example configuration. can also pull Docker image ropensci/rdflib Docker Hub testing libraries installed. badge (also package README) indicates dedicated tests passing.","code":""},{"path":"https://docs.ropensci.org/rdflib/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Boettiger. Author, maintainer, copyright holder. Bryce Mecum. Reviewer. Anna Krystalli. Reviewer. Viktor Senderov. Contributor.","code":""},{"path":"https://docs.ropensci.org/rdflib/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carl Boettiger. (2018). rdflib: high level wrapper around redland package common rdf applications (Version 0.1.0). Zenodo. <https://doi.org/10.5281/zenodo.1098478>","code":"@Manual{,   title = {rdflib: A high level wrapper around the redland package for common rdf applications},   author = {Carl Boettiger},   role = {aut},   role = {cre},   role = {cph},   comment = {0000-0002-1642-628X},   year = {2018},   publisher = {Zenodo},   doi = {10.5281/zenodo.1098478},   url = {https://doi.org/10.5281/zenodo.1098478}, }"},{"path":"https://docs.ropensci.org/rdflib/index.html","id":"rdflib-","dir":"","previous_headings":"","what":"Tools to Manipulate and Query Semantic Data","title":"Tools to Manipulate and Query Semantic Data","text":"friendly consise user interface performing common tasks rdf data, parsing converting formats including rdfxml, turtle, nquads, ntriples, trig, creating rdf graphs, performing SPARQL queries. package wraps redland R package provides direct bindings redland C library. Additionally, package supports parsing serialization rdf json-ld json-ld package, binds official json-ld javascript API. package interface takes inspiration Python rdflib library.","code":""},{"path":"https://docs.ropensci.org/rdflib/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to Manipulate and Query Semantic Data","text":"can install rdflib GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ropensci/rdflib\")"},{"path":"https://docs.ropensci.org/rdflib/index.html","id":"basic-use","dir":"","previous_headings":"","what":"Basic use","title":"Tools to Manipulate and Query Semantic Data","text":"required, rdflib designed play nicely %>% pipes, load magrittr package well: Parse file serialize different format: Perform SPARQL queries: Initialize graph new object add triples statements existing graph: Change default display format (nquads) graph objects:","code":"library(magrittr) library(rdflib) system.file(\"extdata/dc.rdf\", package=\"redland\") %>%   rdf_parse() %>%   rdf_serialize(\"test.nquads\", \"nquads\") sparql <-  'PREFIX dc: <http://purl.org/dc/elements/1.1/>   SELECT ?a ?c   WHERE { ?a dc:creator ?c . }'  system.file(\"extdata/dc.rdf\", package=\"redland\") %>% rdf_parse() %>% rdf_query(sparql) #> # A tibble: 1 × 2 #>   a                      c            #>   <chr>                  <chr>        #> 1 http://www.dajobe.org/ Dave Beckett x <- rdf() x <- rdf_add(x,      subject=\"http://www.dajobe.org/\",     predicate=\"http://purl.org/dc/elements/1.1/language\",     object=\"en\") x #> Total of 1 triples, stored in hashes #> ------------------------------- #> <http://www.dajobe.org/> <http://purl.org/dc/elements/1.1/language> \"en\" . options(rdf_print_format = \"jsonld\") x #> Total of 1 triples, stored in hashes #> ------------------------------- #> { #>   \"@id\": \"http://www.dajobe.org/\", #>   \"http://purl.org/dc/elements/1.1/language\": \"en\" #> }"},{"path":"https://docs.ropensci.org/rdflib/index.html","id":"json-ld","dir":"","previous_headings":"","what":"JSON-LD","title":"Tools to Manipulate and Query Semantic Data","text":"can also work JSON-LD format additional functions provided R package, jsonld. information JSON-LD RDF API, see https://json-ld.org/spec/latest/json-ld-rdf/.","code":"out <- tempfile() rdf_serialize(x, out, \"jsonld\") rdf_parse(out, format = \"jsonld\") #> Total of 1 triples, stored in hashes #> ------------------------------- #> { #>   \"@id\": \"http://www.dajobe.org/\", #>   \"http://purl.org/dc/elements/1.1/language\": \"en\" #> }"},{"path":"https://docs.ropensci.org/rdflib/index.html","id":"advanced-use","dir":"","previous_headings":"","what":"Advanced Use","title":"Tools to Manipulate and Query Semantic Data","text":"See articles documentation advanced use including applications large triplestores, example SPARQL queries, information additional database backends.","code":""},{"path":"https://docs.ropensci.org/rdflib/index.html","id":"citing-rdflib","dir":"","previous_headings":"","what":"Citing rdflib","title":"Tools to Manipulate and Query Semantic Data","text":"Please also cite underlying redland library citing rdflib Carl Boettiger. (2018). rdflib: high level wrapper around redland package common rdf applications (Version 0.1.0). Zenodo. https://doi.org/10.5281/zenodo.1098478 Jones M, Slaughter P, Ooms J, Boettiger C, Chamberlain S (2022). redland: RDF Library Bindings R. doi:10.5063/F1VM496B https://doi.org/10.5063/F1VM496B, R package version 1.0.17-16, https://github.com/ropensci/redland-bindings/tree/master/R/redland.","code":""},{"path":"https://docs.ropensci.org/rdflib/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Resource Description Framework, RDF [@RDF; @W3C_RDF] widely used data representation model forms cornerstone Semantic Web. RDF represents data graph rather familiar data table rectangle relational databases. rdflib package provides friendly concise user interface performing common tasks RDF data, reading, writing converting various serializations RDF data, including rdfxml, turtle, nquads, ntriples, json-ld; creating new rdf graphs, performing graph queries using SPARQL [@SPARQL; @W3C_SPARQL]. package wraps low level redland R package [@redland] provides direct bindings redland C library. Additionally, package supports newer developer friendly JSON-LD format jsonld package [@jsonld; @W3C_jsonld].","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdflib/reference/as_rdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into RDF — as_rdf","title":"Coerce an object into RDF — as_rdf","text":"Coerce object RDF","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/as_rdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into RDF — as_rdf","text":"","code":"as_rdf(   x,   rdf = NULL,   prefix = NULL,   base = getOption(\"rdf_base_uri\", \"localhost://\"),   context = NULL,   key_column = NULL )"},{"path":"https://docs.ropensci.org/rdflib/reference/as_rdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into RDF — as_rdf","text":"x object coerce RDF (list, list-like, data.frame) rdf existing rdf object, (default new object initialized) prefix default vocabulary (URI prefix) assume predicates base base URI assume blank subject nodes context named list mapping string URI key_column name column treated primary key table. must unique","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/as_rdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into RDF — as_rdf","text":"","code":"as_rdf(mtcars) #> Warning: prefix not declared, using df: as_rdf(list(repo = \"rdflib\", owner = list(\"id\", \"ropensci\")))"},{"path":"https://docs.ropensci.org/rdflib/reference/c.rdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate rdf Objects. — c.rdf","title":"Concatenate rdf Objects. — c.rdf","text":"subsequent rdf objects appended first rdf object Note: free memory individual rdf objects Note: generally better avoid use function passing existing rdf object rdf_parse rdf_add objects. Multiple active rdf objects can cause problems using disk-based storage backends.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/c.rdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate rdf Objects. — c.rdf","text":"","code":"# S3 method for rdf c(...)"},{"path":"https://docs.ropensci.org/rdflib/reference/c.rdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate rdf Objects. — c.rdf","text":"... objects concatenated","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize an rdf Object — rdf","title":"Initialize an rdf Object — rdf","text":"Initialize rdf Object","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize an rdf Object — rdf","text":"","code":"rdf(   storage = c(\"memory\", \"BDB\", \"sqlite\", \"postgres\", \"mysql\", \"virtuoso\"),   host = NULL,   port = NULL,   user = NULL,   password = NULL,   database = NULL,   charset = NULL,   dir = NULL,   dsn = \"Local Virtuoso\",   name = \"rdflib\",   new_db = FALSE,   fallback = TRUE )"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize an rdf Object — rdf","text":"storage Storage backend use; see details host host address mysql, postgres, virtuoso storage port port mysql (mysql storage defaults mysql standard port, 3306) postgres (postgres storage defaults postgres standard port, 4321) user user name postgres, mysql, virtuoso password password postgres, mysql, virtuoso database name database created/used charset charset virtuoso database, desired dir directory write sqlite berkeley database. dsn Virtuoso dsn, either \"Local Virtuoso\" \"Remote Virtuoso\" name name storage object created. Default usually fine. new_db logical, default FALSE. Create new database connect existing? fallback logical, default TRUE. requested storage system initialize, rdf() fall back memory (default) throw error (fallback=FALSE)?","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize an rdf Object — rdf","text":"rdf object","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize an rdf Object — rdf","text":"rdf Object list class 'rdf', consisting three pointers external C objects managed redland library. world object: basically top-level pointer RDF models, model object: collection RDF statements, storage object, indicating statements stored. rdflib defaults -memory hash-based storage structure. best use cases. large triplestores, disk-based storage necessary. Enabling external storage devices require additional libraries custom compiling. See storage vignette details.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize an rdf Object — rdf","text":"","code":"x <- rdf()"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add RDF Triples — rdf_add","title":"Add RDF Triples — rdf_add","text":"add triple (subject, predicate, object) RDF graph","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add RDF Triples — rdf_add","text":"","code":"rdf_add(   rdf,   subject,   predicate,   object,   subjectType = as.character(NA),   objectType = as.character(NA),   datatype_uri = as.character(NA) )"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add RDF Triples — rdf_add","text":"rdf rdf object subject character string containing subject predicate character string containing predicate object character string containing object subjectType Node type subject, .e. \"uri\", \"blank\" objectType Node type object, .e. \"literal\", \"uri\", \"blank\" datatype_uri datatype URI associate object literal value","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add RDF Triples — rdf_add","text":"Silently returns updated RDF graph (rdf object). Since rdf object simply contains external pointers model object C code, note input object modified directly, need assign output rdf_add() anything.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add RDF Triples — rdf_add","text":"rdf_add() automatically 'duck type' nodes (looks like duck...). , strings look like URIs declared URIs. (See URI). Predicate always URI (e.g. URL  prefix:string), blank literal.  Subjects look like strings treated Blank Nodes (.e. prefixed _:).  empty subject, \"\", create blank node random name.  Objects look like URIs typed resource nodes, otherwise literals.  empty object \"\" treated blank node.  Set subjectType objectType explicitly override behavior, e.g. treat object URI literal string.  NAs also treated blank nodes subject object  See examples details.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add RDF Triples — rdf_add","text":"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add RDF Triples — rdf_add","text":"","code":"rdf <- rdf() rdf_add(rdf,      subject=\"http://www.dajobe.org/\",     predicate=\"http://purl.org/dc/elements/1.1/language\",     object=\"en\")      ## non-URI string in subject indicates a blank subject ## (prefixes to \"_:b0\") rdf_add(rdf, \"b0\", \"http://schema.org/jobTitle\", \"Professor\")   ## identically a blank subject.   ## Note rdf is unchanged when we add the same triple twice. rdf_add(rdf, \"b0\", \"http://schema.org/jobTitle\", \"Professor\",          subjectType = \"blank\")           ## blank node with empty string creates a default blank node id rdf_add(rdf, \"\", \"http://schema.org/jobTitle\", \"Professor\")                          ## Subject and Object both recognized as URI resources: rdf_add(rdf,          \"https://orcid.org/0000-0002-1642-628X\",         \"http://schema.org/homepage\",          \"http://carlboettiger.info\")     ## Force object to be literal, not URI resource         rdf_add(rdf,          \"https://orcid.org/0000-0002-1642-628X\",         \"http://schema.org/homepage\",          \"http://carlboettiger.info\",         objectType = \"literal\")"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_free.html","id":null,"dir":"Reference","previous_headings":"","what":"Free Memory Associated with RDF object — rdf_free","title":"Free Memory Associated with RDF object — rdf_free","text":"Free Memory Associated RDF object","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Free Memory Associated with RDF object — rdf_free","text":"","code":"rdf_free(rdf, rm = TRUE)"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Free Memory Associated with RDF object — rdf_free","text":"rdf rdf object rm logical, default TRUE. Remove pointer parent.frame()? Usually good idea since referring pointer removed can crash R.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_free.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Free Memory Associated with RDF object — rdf_free","text":"Free pointers associated rdf object. Frees memory associated storage, world, model objects.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Free Memory Associated with RDF object — rdf_free","text":"","code":"rdf <- rdf() rdf_free(rdf) rm(rdf) #> Warning: object 'rdf' not found"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_has_bdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for BDB support — rdf_has_bdb","title":"Check for BDB support — rdf_has_bdb","text":"Detect whether Berkeley Database disk-based storage RDF graphs available.  Disk-based storage requires redland package installed source support Berkeley DB (libdb-dev Ubuntu, berkeley-db homebrew), otherwise rdf() fall back -memory storage warning.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_has_bdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for BDB support — rdf_has_bdb","text":"","code":"rdf_has_bdb()"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_has_bdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for BDB support — rdf_has_bdb","text":"TRUE BDB support detected, false otherwise","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_has_bdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for BDB support — rdf_has_bdb","text":"","code":"rdf_has_bdb() #> [1] TRUE"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse RDF Files — rdf_parse","title":"Parse RDF Files — rdf_parse","text":"Parse RDF Files","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse RDF Files — rdf_parse","text":"","code":"rdf_parse(   doc,   format = c(\"guess\", \"rdfxml\", \"nquads\", \"ntriples\", \"turtle\", \"jsonld\"),   rdf = NULL,   base = getOption(\"rdf_base_uri\", \"localhost://\"),   ... )"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse RDF Files — rdf_parse","text":"doc path, URL, literal string rdf document parse format rdf serialization format doc, one \"rdfxml\", \"nquads\", \"ntriples\", \"turtle\" \"jsonld\". provided, try guess based file extension fall back rdfxml. rdf existing rdf triplestore extend triples parsed file.  Default create new rdf object. base base URI assume relative URIs (blank nodes) ... additional parameters (implemented)","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse RDF Files — rdf_parse","text":"rdf object, containing redland world model objects","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse RDF Files — rdf_parse","text":"","code":"doc <- system.file(\"extdata\", \"dc.rdf\", package=\"redland\") rdf <- rdf_parse(doc)"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a SPARQL Query — rdf_query","title":"Perform a SPARQL Query — rdf_query","text":"Perform SPARQL Query","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a SPARQL Query — rdf_query","text":"","code":"rdf_query(rdf, query, data.frame = TRUE, ...)"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a SPARQL Query — rdf_query","text":"rdf rdf object (e.g. rdf_parse) query SPARQL query, text string data.frame logical, results returned data.frame? ... additional arguments redland initialize-Query","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a SPARQL Query — rdf_query","text":"data.frame query results (default.)  Columns named according variable names SPARQL query. Returned object values coerced match corresponding R type associated datatype URI, provided. column result mixed classes (e.g. strings numerics), types column coerced character strings. data.frame false, results returned list element typed data URI.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a SPARQL Query — rdf_query","text":"","code":"doc <- system.file(\"extdata\", \"dc.rdf\", package=\"redland\")  sparql <- 'PREFIX dc: <http://purl.org/dc/elements/1.1/>  SELECT ?a ?c  WHERE { ?a dc:creator ?c . }'  rdf <- rdf_parse(doc) rdf_query(rdf, sparql) #> # A tibble: 1 × 2 #>   a                      c            #>   <chr>                  <chr>        #> 1 http://www.dajobe.org/ Dave Beckett"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_serialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize an RDF Document — rdf_serialize","title":"Serialize an RDF Document — rdf_serialize","text":"Serialize RDF Document","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_serialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize an RDF Document — rdf_serialize","text":"","code":"rdf_serialize(   rdf,   doc = NULL,   format = c(\"guess\", \"rdfxml\", \"nquads\", \"ntriples\", \"turtle\", \"jsonld\"),   namespace = NULL,   prefix = names(namespace),   base = getOption(\"rdf_base_uri\", \"localhost://\"),   ... )"},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_serialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize an RDF Document — rdf_serialize","text":"rdf existing rdf triplestore extend triples parsed file.  Default create new rdf object. doc file path write . null, write character. format rdf serialization format doc, one \"rdfxml\", \"nquads\", \"ntriples\", \"turtle\" \"jsonld\". provided, try guess based file extension fall back rdfxml. namespace named character containing prefix namespace bindings. names(namespace) prefixes, whereas namespace namespaces prefix (optional) backward compatibility. See namespace. contains matching prefixes namespaces namespace set automatically provide namespace named character vector. base base URI assume relative URIs (blank nodes) ... additional arguments redland::serializeToFile","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_serialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize an RDF Document — rdf_serialize","text":"rdf_serialize returns output file path doc invisibly. makes easier use rdf_serialize pipe chains rdf_parse.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdf_serialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialize an RDF Document — rdf_serialize","text":"","code":"infile <- system.file(\"extdata\", \"dc.rdf\", package=\"redland\") out <- tempfile(\"file\", fileext = \".rdf\")  some_rdf <- rdf_parse(infile) rdf_add(some_rdf,     subject = \"http://www.dajobe.org/dave-beckett\",     predicate = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",     object = \"http://xmlns.com/foaf/0.1/Person\") rdf_serialize(some_rdf, out)  ## With a namespace rdf_serialize(some_rdf,           out,           format = \"turtle\",           namespace = c(dc = \"http://purl.org/dc/elements/1.1/\",           foaf = \"http://xmlns.com/foaf/0.1/\")           )  readLines(out) #>  [1] \"@base <localhost://> .\"                                          #>  [2] \"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\"    #>  [3] \"@prefix dc: <http://purl.org/dc/elements/1.1/> .\"                #>  [4] \"@prefix foaf: <http://xmlns.com/foaf/0.1/> .\"                    #>  [5] \"\"                                                                #>  [6] \"<http://www.dajobe.org/>\"                                        #>  [7] \"    dc:creator \\\"Dave Beckett\\\" ;\"                               #>  [8] \"    dc:description \\\"The generic home page of Dave Beckett.\\\" ;\" #>  [9] \"    dc:title \\\"Dave Beckett's Home Page\\\" .\"                     #> [10] \"\"                                                                #> [11] \"<http://www.dajobe.org/dave-beckett>\"                            #> [12] \"    a foaf:Person .\"                                             #> [13] \"\""},{"path":"https://docs.ropensci.org/rdflib/reference/rdflib-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rdflib: Tools to Manipulate and Query Semantic Data — rdflib-package","title":"rdflib: Tools to Manipulate and Query Semantic Data — rdflib-package","text":"Resource Description Framework, RDF widely used data representation model forms cornerstone Semantic Web. 'RDF' represents data graph rather familiar data table rectangle relational databases.","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/rdflib-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rdflib: Tools to Manipulate and Query Semantic Data — rdflib-package","text":"three main goals: Easily read, write, convert major RDF serialization formats Support SPARQL queries extract data RDF graph data.frame Support JSON-LD format first-class citizen RDF manipulations information, see Wikipedia pages RDF, SPARQL, JSON-LD: https://en.wikipedia.org/wiki/Resource_Description_Framework https://en.wikipedia.org/wiki/SPARQL https://en.wikipedia.org/wiki/JSON-LD learn rdflib, start vignettes: browseVignettes(package = \"rdflib\") Configurations via options() rdf_print_format: NULL \"nquads\" (default) valid serializer name: e.g. \"rdfxml\", \"jsonld\", \"turtle\",  \"ntriples\" rdf_base_uri: Default base URI use (serializing JSON-LD time) default \"localhost://\" rdf_max_print: maximum number lines print rdf, default 10","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdflib/reference/rdflib-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rdflib: Tools to Manipulate and Query Semantic Data — rdflib-package","text":"Maintainer: Carl Boettiger cboettig@gmail.com (ORCID) [copyright holder] contributors: Bryce Mecum (ORCID) [reviewer] Anna Krystalli (ORCID) [reviewer] Viktor Senderov vsenderov@gmail.com (ORCID) [contributor]","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/read_nquads.html","id":null,"dir":"Reference","previous_headings":"","what":"read an nquads file — read_nquads","title":"read an nquads file — read_nquads","text":"read nquads file","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/read_nquads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read an nquads file — read_nquads","text":"","code":"read_nquads(file, ...)"},{"path":"https://docs.ropensci.org/rdflib/reference/read_nquads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read an nquads file — read_nquads","text":"file path nquads file ... additional arguments rdf_parse()","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/read_nquads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read an nquads file — read_nquads","text":"rdf object.  See rdf_parse()","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/read_nquads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read an nquads file — read_nquads","text":"","code":"tmp <- tempfile(fileext = \".nq\") library(datasets) write_nquads(iris, tmp) #> Warning: prefix not declared, using df: read_nquads(tmp) #> Total of 750 triples, stored in hashes #> ------------------------------- #> <df:28> <df:Sepal.Width> \"3.5\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:3> <df:Sepal.Width> \"3.2\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:126> <df:Petal.Width> \"1.8\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:38> <df:Petal.Width> \"0.1\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:111> <df:Sepal.Length> \"6.5\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:149> <df:Sepal.Width> \"3.4\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:84> <df:Sepal.Length> \"6\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:87> <df:Petal.Width> \"1.5\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #> <df:42> <df:Species> \"setosa\"^^<http://www.w3.org/2001/XMLSchema#string> . #> <df:138> <df:Petal.Width> \"1.8\"^^<http://www.w3.org/2001/XMLSchema#decimal> . #>  #> ... with 740 more triples"},{"path":"https://docs.ropensci.org/rdflib/reference/write_nquads.html","id":null,"dir":"Reference","previous_headings":"","what":"write object out as nquads — write_nquads","title":"write object out as nquads — write_nquads","text":"write object nquads","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/write_nquads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write object out as nquads — write_nquads","text":"","code":"write_nquads(x, file, ...)"},{"path":"https://docs.ropensci.org/rdflib/reference/write_nquads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write object out as nquads — write_nquads","text":"x object can represented nquads file output filename ... additional parameters, see examples","code":""},{"path":"https://docs.ropensci.org/rdflib/reference/write_nquads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write object out as nquads — write_nquads","text":"","code":"tmp <- tempfile(fileext = \".nq\") library(datasets)  ## convert data.frame to nquads write_nquads(iris, tmp) #> Warning: prefix not declared, using df: rdf <- read_nquads(tmp)  ## or starting a native rdf object write_nquads(rdf, tempfile(fileext = \".nq\"))"},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-028","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.8","title":"rdflib 0.2.8","text":"CRAN release: 2023-12-19 tests fail gracefully CRAN without internet resources","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-027","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.7","title":"rdflib 0.2.7","text":"CRAN release: 2023-09-16 make jsonld optional dependency","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-026","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.6","title":"rdflib 0.2.6","text":"CRAN release: 2023-03-09 bugfix vroom warning","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-025","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.5","title":"rdflib 0.2.5","text":"CRAN release: 2022-02-09 bugfix UTF-8","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-024","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.4","title":"rdflib 0.2.4","text":"CRAN release: 2022-01-03 bugfix write_nquads() rdf method","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-023-2020-01-10","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.3 2020-01-10","title":"rdflib 0.2.3 2020-01-10","text":"CRAN release: 2020-01-10 Drop import deprecated redland method, getNextResult (#33)","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-022-2019-01-15","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.2 2019-01-15","title":"rdflib 0.2.2 2019-01-15","text":"CRAN release: 2019-01-15 Minor patch fix license file Updates documentation hex","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-021-2018-11-25","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.1 2018-11-25","title":"rdflib 0.2.1 2018-11-25","text":"CRAN release: 2018-11-25 Minor patch make test compatible breaking change readr 1.2.0 (#30)","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-020-2018-11-13","dir":"Changelog","previous_headings":"","what":"rdflib 0.2.0 2018-11-13","title":"rdflib 0.2.0 2018-11-13","text":"CRAN release: 2018-11-13","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"rdflib 0.2.0 2018-11-13","text":"rdf() supports major storage backends: Virtuoso, SQLite, Postgres, MySQL, addition existing support BDB memory-based storage. length() method added report length triplestore print() method gains rdf_max_print() option print huge triplestores print() method sumarizes total number triples backend","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-010-2018-03-02","dir":"Changelog","previous_headings":"","what":"rdflib 0.1.0 (2018-03-02)","title":"rdflib 0.1.0 (2018-03-02)","text":"CRAN release: 2018-03-09","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"rdflib 0.1.0 (2018-03-02)","text":"rdf() supports BDB backend disk-based storage large triplestores #6 rdf_parse() gains argument rdf append triples existing graph adds c() method concatenate rdf objects Performance improvements make possible handle triplestores millions triples Two new vignettes better introduce RDF package functions.","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"minor-improvements-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor Improvements","title":"rdflib 0.1.0 (2018-03-02)","text":"rdf_query now bypasses slow iteration getNextResult approach uses internal redland function call access results csv format. experimental as_rdf method now uses poor-man’s nquad serializer rapidly generate rdf (instead slowly iterating add_rdf). rdf_add argument object can now take atomic types (numeric, integer, string, Date, POSIX, logical) automatically declare appropriate datatype_uri user manually specified . Numerous improvements documentation rOpenSci onboarding feedback, see #9 #10 functions unit tests broken separate files respective directories. Additional example RDF data added extdata rdf_serialize passes ... arguments serializeToFile (e.g. set baseUri)","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"rdflib 0.1.0 (2018-03-02)","text":"rdf_free() also remove object parent frame, reducing potential crashing R referring freed pointer. fix encoding UTF-8 characters (coming nquads & ntriples) rdf_query() now coerces data appropriate type recognizes data URI can match R type (XMLSchema types recognized, otherwise still defaults character string) Memory management: methods free memory temporary objects initialize, tests free memory. (e.g. parsers, serializers, query, statement) extend unit tests cover new features, check UTF-8 turtle parser/serializer fixed","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"deprecated-0-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"rdflib 0.1.0 (2018-03-02)","text":"trig support removed (working redland without optional libraries alternative compile configuration)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"rdflib 0.0.3 (2018-01-02)","text":"add paper.md add package level documentation set base uri serializing json-ld rdf (#5)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"rdflib 0.0.2 (2018-01-02)","text":"Added NEWS.md file track changes package. sparql query returns data.frame format added vignette added pkgdown website vignette","code":""},{"path":"https://docs.ropensci.org/rdflib/news/index.html","id":"rdflib-001-2017-12-09","dir":"Changelog","previous_headings":"","what":"rdflib 0.0.1 (2017-12-09)","title":"rdflib 0.0.1 (2017-12-09)","text":"Initial prototype","code":""}]
